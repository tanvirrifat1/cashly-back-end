
// const createUserToDB = async (payload: Partial<IUser & IAgency>) => {
//   const session = await startSession();

//   try {
//     session.startTransaction();

//     // Validate required fields
//     if (!payload.email) {
//       throw new ApiError(StatusCodes.BAD_REQUEST, 'Please provide email');
//     }
//     if (!payload.phone) {
//       throw new ApiError(
//         StatusCodes.BAD_REQUEST,
//         'Please provide phone number'
//       );
//     }

//     const isEmail = await User.findOne({ email: payload.email });
//     if (isEmail) {
//       throw new ApiError(StatusCodes.BAD_REQUEST, 'Email already exists');
//     }

//     // Create user first
//     const userPayload = {
//       email: payload.email,
//       password: payload.password,
//       role: USER_ROLES.BUYER,
//     };

//     const [user] = await User.create([userPayload], { session });
//     if (!user) {
//       throw new ApiError(StatusCodes.BAD_REQUEST, 'Failed to create user');
//     }

//     // Create client and associate with user
//     const buyerpayload = {
//       ...payload,
//       userId: user._id,
//     };

//     const [client] = await Buyer.create([buyerpayload], { session });
//     if (!client) {
//       throw new ApiError(StatusCodes.BAD_REQUEST, 'Failed to create user');
//     }

//     // Update user with client reference
//     const updatedUser = await User.findOneAndUpdate(
//       { _id: user._id },
//       { $set: { client: client._id } },
//       { session, new: true }
//     );
//     if (!updatedUser) {
//       throw new ApiError(StatusCodes.NOT_FOUND, 'User not found for update');
//     }

//     // Generate OTP
//     const otp = generateOTP();
//     const authentication = {
//       oneTimeCode: otp,
//       expireAt: new Date(Date.now() + 5 * 60000), // OTP valid for 3 minutes
//     };

//     // Send OTP via Twilio
//     await twilioClient.messages.create({
//       body: `Your OTP is: ${otp}. It will expire in 5 minutes.`,
//       from: process.env.TWILIO_PHONE_NUMBER, // Twilio phone number
//       to: payload.phone,
//     });

//     // Update user with authentication details
//     const updatedAuthenticationUser = await User.findOneAndUpdate(
//       { _id: user._id },
//       { $set: { authentication } },
//       { session, new: true }
//     );

//     if (!updatedAuthenticationUser) {
//       throw new ApiError(
//         StatusCodes.NOT_FOUND,
//         'User not found for authentication update'
//       );
//     }

//     // Commit transaction
//     await session.commitTransaction();

//     return updatedAuthenticationUser;
//   } catch (error) {
//     // Abort transaction on error
//     await session.abortTransaction();
//     throw error;
//   } finally {
//     await session.endSession();
//   }
// };


//user suspended
// const suspendUser = async (userId: string, days: number) => {
//   const suspensionEndDate = new Date();
//   suspensionEndDate.setDate(suspensionEndDate.getDate() + days);

//   const isUser = await User.findById(userId);

//   if (!isUser) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'User not found');
//   }

//   const user = await User.findByIdAndUpdate(
//     userId,
//     { isSuspended: true, suspensionEndDate },
//     { new: true }
//   );

//   if (!user) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'User not found');
//   }

//   const value = {
//     receiver: userId,
//     text: `Your account has been suspended for ${days} days.`,
//   };

//   if (user) {
//     sendNotifications(value);
//   }

//   return user;
// };


// const reactivateUsers = async () => {
//   const now = new Date();
//   const users = await User.updateMany(
//     { isSuspended: true, suspensionEndDate: { $lte: now } },
//     { isSuspended: false, suspensionEndDate: null }
//   );

//   console.log(users, 'users');

//   if (users.matchedCount === 0) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'No suspended users found');
//   }

//   return users;
// };


// const ActiveUser = async (userId: string) => {
//   const user = await User.findByIdAndUpdate(
//     userId,
//     { isSuspended: false, suspensionEndDate: null },
//     { new: true }
//   );

//   if (!user) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'User not found');
//   }

//   const value = {
//     receiver: userId,
//     text: `Your account has been reactivated.`,
//   };

//   if (user) {
//     sendNotifications(value);
//   }

//   return user;
// };

// import { FilterQuery, Query } from 'mongoose';

// class QueryBuilder<T> {
//   public modelQuery: Query<T[], T>;
//   public query: Record<string, unknown>;

//   constructor(modelQuery: Query<T[], T>, query: Record<string, unknown>) {
//     this.modelQuery = modelQuery;
//     this.query = query;
//   }

//   search(searchableFields: string[]) {
//     const searchTerm = this?.query?.searchTerm;
//     if (searchTerm) {
//       this.modelQuery = this.modelQuery.find({
//         $or: searchableFields.map(
//           field =>
//             ({
//               [field]: { $regex: searchTerm, $options: 'i' },
//             } as FilterQuery<T>)
//         ),
//       });
//     }

//     return this;
//   }

//   filter() {
//     const queryObj = { ...this.query };
//     queryObj['status'] = 'active';

//     // filtering
//     const excludeFields = ['searchTerm', 'sort', 'limit', 'page', 'fields'];

//     excludeFields.forEach(el => delete queryObj[el]);

//     this.modelQuery = this.modelQuery.find(queryObj as FilterQuery<T>);
//     return this;
//   }

//   sort() {
//     const sort =
//       (this?.query?.sort as string)?.split(',')?.join(' ') || '-createdAt';
//     this.modelQuery = this.modelQuery.sort(sort as string);

//     return this;
//   }

//   paginate() {
//     const page = Number(this?.query?.page) || 1;
//     const limit = Number(this?.query.limit) || 10;
//     const skip = (page - 1) * limit;

//     this.modelQuery = this.modelQuery.skip(skip).limit(limit);

//     return this;
//   }

//   fields() {
//     const fields =
//       (this?.query?.fields as string)?.split(',')?.join(' ') || '-__v';
//     this.modelQuery = this.modelQuery.select(fields);

//     return this;
//   }
// }

// export default QueryBuilder;